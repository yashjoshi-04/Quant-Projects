{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": 1,
   "id": "95db6eea-a878-4b35-8827-cde3f9685f52",
   "metadata": {},
   "outputs": [],
   "source": [
    "import pandas as pd\n",
    "import numpy as np\n",
    "import matplotlib.pyplot as plt\n",
    "import matplotlib as mpl\n",
    "import seaborn as sns\n",
    "import os\n",
    "import openpyxl as op\n",
    "%matplotlib inline\n",
    "import sympy as sp\n",
    "import statsmodels.api as sm"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "id": "b07e661b-59f8-450b-ac5b-8d012c09692a",
   "metadata": {},
   "outputs": [],
   "source": [
    "# Set print options\n",
    "np.set_printoptions(precision = 3)\n",
    "plt.style.use(\"ggplot\") # Grammar of Graphics plot style\n",
    "mpl.rcParams[\"axes.facecolor\"] = \"white\"\n",
    "mpl.rcParams[\"legend.fontsize\"] = 14\n",
    "mpl.rcParams[\"axes.grid\"] = True\n",
    "mpl.rcParams[\"grid.color\"] = \"grey\"\n",
    "mpl.rcParams[\"grid.alpha\"] = 0.25 #opaqueness\n",
    "\n",
    "import warnings\n",
    "warnings.filterwarnings(\"ignore\")"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "5484281c-03fd-4d67-961f-2db1c3ae03ff",
   "metadata": {},
   "source": [
    "### Importing `Market` Portfolio and the `Top 10 Industries` Portfolios."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "id": "1059e97c-c694-4f5e-baf0-1fefd1f10ab0",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>Market</th>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Date</th>\n",
       "      <th></th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>200401</th>\n",
       "      <td>2.22</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>200402</th>\n",
       "      <td>1.46</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>200403</th>\n",
       "      <td>-1.23</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>200404</th>\n",
       "      <td>-1.75</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>200405</th>\n",
       "      <td>1.23</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>...</th>\n",
       "      <td>...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>201308</th>\n",
       "      <td>-2.69</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>201309</th>\n",
       "      <td>3.76</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>201310</th>\n",
       "      <td>4.17</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>201311</th>\n",
       "      <td>3.12</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>201312</th>\n",
       "      <td>2.81</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "<p>120 rows Ã— 1 columns</p>\n",
       "</div>"
      ],
      "text/plain": [
       "        Market\n",
       "Date          \n",
       "200401    2.22\n",
       "200402    1.46\n",
       "200403   -1.23\n",
       "200404   -1.75\n",
       "200405    1.23\n",
       "...        ...\n",
       "201308   -2.69\n",
       "201309    3.76\n",
       "201310    4.17\n",
       "201311    3.12\n",
       "201312    2.81\n",
       "\n",
       "[120 rows x 1 columns]"
      ]
     },
     "execution_count": 3,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "Market_portfolio =\\\n",
    "(\n",
    "   pd\n",
    "    .read_excel('Market_Portfolio.xlsx',index_col=0)\n",
    ")\n",
    "Market_portfolio"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "id": "1a26b826-88fc-4d3f-922b-cfd34edd6bc2",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>NoDur</th>\n",
       "      <th>Durbl</th>\n",
       "      <th>Manuf</th>\n",
       "      <th>Enrgy</th>\n",
       "      <th>HiTec</th>\n",
       "      <th>Telcm</th>\n",
       "      <th>Shops</th>\n",
       "      <th>Hlth</th>\n",
       "      <th>Utils</th>\n",
       "      <th>Other</th>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Date</th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>200401</th>\n",
       "      <td>0.06</td>\n",
       "      <td>-1.07</td>\n",
       "      <td>-0.62</td>\n",
       "      <td>0.44</td>\n",
       "      <td>4.53</td>\n",
       "      <td>1.41</td>\n",
       "      <td>0.45</td>\n",
       "      <td>3.09</td>\n",
       "      <td>1.92</td>\n",
       "      <td>2.88</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>200402</th>\n",
       "      <td>4.25</td>\n",
       "      <td>-0.07</td>\n",
       "      <td>1.95</td>\n",
       "      <td>4.69</td>\n",
       "      <td>-2.92</td>\n",
       "      <td>-0.52</td>\n",
       "      <td>6.09</td>\n",
       "      <td>0.89</td>\n",
       "      <td>2.07</td>\n",
       "      <td>2.16</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>200403</th>\n",
       "      <td>-0.09</td>\n",
       "      <td>-1.15</td>\n",
       "      <td>-0.27</td>\n",
       "      <td>-0.13</td>\n",
       "      <td>-2.55</td>\n",
       "      <td>-2.07</td>\n",
       "      <td>0.29</td>\n",
       "      <td>-3.96</td>\n",
       "      <td>1.13</td>\n",
       "      <td>-0.63</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>200404</th>\n",
       "      <td>1.42</td>\n",
       "      <td>2.30</td>\n",
       "      <td>-0.17</td>\n",
       "      <td>2.52</td>\n",
       "      <td>-4.91</td>\n",
       "      <td>-0.48</td>\n",
       "      <td>-2.70</td>\n",
       "      <td>3.54</td>\n",
       "      <td>-3.55</td>\n",
       "      <td>-3.76</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>200405</th>\n",
       "      <td>-1.89</td>\n",
       "      <td>-1.64</td>\n",
       "      <td>1.61</td>\n",
       "      <td>0.39</td>\n",
       "      <td>4.85</td>\n",
       "      <td>-2.95</td>\n",
       "      <td>0.30</td>\n",
       "      <td>-0.42</td>\n",
       "      <td>1.28</td>\n",
       "      <td>1.86</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>...</th>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>201308</th>\n",
       "      <td>-4.00</td>\n",
       "      <td>-1.00</td>\n",
       "      <td>-1.95</td>\n",
       "      <td>-1.83</td>\n",
       "      <td>-0.12</td>\n",
       "      <td>-3.28</td>\n",
       "      <td>-4.21</td>\n",
       "      <td>-3.49</td>\n",
       "      <td>-4.43</td>\n",
       "      <td>-3.66</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>201309</th>\n",
       "      <td>1.94</td>\n",
       "      <td>6.46</td>\n",
       "      <td>5.20</td>\n",
       "      <td>2.03</td>\n",
       "      <td>3.77</td>\n",
       "      <td>4.33</td>\n",
       "      <td>4.46</td>\n",
       "      <td>4.19</td>\n",
       "      <td>1.05</td>\n",
       "      <td>3.83</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>201310</th>\n",
       "      <td>4.75</td>\n",
       "      <td>0.72</td>\n",
       "      <td>4.56</td>\n",
       "      <td>4.86</td>\n",
       "      <td>3.80</td>\n",
       "      <td>5.52</td>\n",
       "      <td>5.08</td>\n",
       "      <td>3.47</td>\n",
       "      <td>3.35</td>\n",
       "      <td>3.87</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>201311</th>\n",
       "      <td>1.29</td>\n",
       "      <td>1.81</td>\n",
       "      <td>2.95</td>\n",
       "      <td>0.85</td>\n",
       "      <td>3.65</td>\n",
       "      <td>0.27</td>\n",
       "      <td>3.67</td>\n",
       "      <td>4.54</td>\n",
       "      <td>-1.81</td>\n",
       "      <td>4.74</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>201312</th>\n",
       "      <td>2.65</td>\n",
       "      <td>1.18</td>\n",
       "      <td>3.13</td>\n",
       "      <td>2.95</td>\n",
       "      <td>4.04</td>\n",
       "      <td>3.96</td>\n",
       "      <td>0.20</td>\n",
       "      <td>0.71</td>\n",
       "      <td>1.79</td>\n",
       "      <td>3.11</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "<p>120 rows Ã— 10 columns</p>\n",
       "</div>"
      ],
      "text/plain": [
       "        NoDur  Durbl  Manuf  Enrgy  HiTec  Telcm  Shops  Hlth  Utils  Other\n",
       "Date                                                                       \n",
       "200401   0.06  -1.07  -0.62   0.44   4.53   1.41   0.45  3.09   1.92   2.88\n",
       "200402   4.25  -0.07   1.95   4.69  -2.92  -0.52   6.09  0.89   2.07   2.16\n",
       "200403  -0.09  -1.15  -0.27  -0.13  -2.55  -2.07   0.29 -3.96   1.13  -0.63\n",
       "200404   1.42   2.30  -0.17   2.52  -4.91  -0.48  -2.70  3.54  -3.55  -3.76\n",
       "200405  -1.89  -1.64   1.61   0.39   4.85  -2.95   0.30 -0.42   1.28   1.86\n",
       "...       ...    ...    ...    ...    ...    ...    ...   ...    ...    ...\n",
       "201308  -4.00  -1.00  -1.95  -1.83  -0.12  -3.28  -4.21 -3.49  -4.43  -3.66\n",
       "201309   1.94   6.46   5.20   2.03   3.77   4.33   4.46  4.19   1.05   3.83\n",
       "201310   4.75   0.72   4.56   4.86   3.80   5.52   5.08  3.47   3.35   3.87\n",
       "201311   1.29   1.81   2.95   0.85   3.65   0.27   3.67  4.54  -1.81   4.74\n",
       "201312   2.65   1.18   3.13   2.95   4.04   3.96   0.20  0.71   1.79   3.11\n",
       "\n",
       "[120 rows x 10 columns]"
      ]
     },
     "execution_count": 4,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "industry =\\\n",
    "(\n",
    "   pd\n",
    "    .read_excel('Industry_Portfolios-2.xlsx',index_col=0)\n",
    ")\n",
    "industry"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "38fb760c-87cb-4aec-9133-27a953170a1c",
   "metadata": {},
   "source": [
    "### Calculating `Excess Portfolio Returns` and `Excess Market Returns`"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 11,
   "id": "ace9cdc8-8ac5-40cc-8632-22aa79dcf06f",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>Market</th>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Date</th>\n",
       "      <th></th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>200401</th>\n",
       "      <td>2.09</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>200402</th>\n",
       "      <td>1.33</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>200403</th>\n",
       "      <td>-1.36</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>200404</th>\n",
       "      <td>-1.88</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>200405</th>\n",
       "      <td>1.10</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>...</th>\n",
       "      <td>...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>201308</th>\n",
       "      <td>-2.82</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>201309</th>\n",
       "      <td>3.63</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>201310</th>\n",
       "      <td>4.04</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>201311</th>\n",
       "      <td>2.99</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>201312</th>\n",
       "      <td>2.68</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "<p>120 rows Ã— 1 columns</p>\n",
       "</div>"
      ],
      "text/plain": [
       "        Market\n",
       "Date          \n",
       "200401    2.09\n",
       "200402    1.33\n",
       "200403   -1.36\n",
       "200404   -1.88\n",
       "200405    1.10\n",
       "...        ...\n",
       "201308   -2.82\n",
       "201309    3.63\n",
       "201310    4.04\n",
       "201311    2.99\n",
       "201312    2.68\n",
       "\n",
       "[120 rows x 1 columns]"
      ]
     },
     "execution_count": 11,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "Rf = 0.13\n",
    "Excess_market_return = Market_portfolio - Rf\n",
    "Excess_market_return"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 13,
   "id": "d9a32227-b400-4a2c-9cf7-de09a8902073",
   "metadata": {},
   "outputs": [],
   "source": [
    "Non_Durables = pd.DataFrame(industry['NoDur']) - Rf\n",
    "Durables = pd.DataFrame(industry['Durbl']) - Rf\n",
    "Manufacturing = pd.DataFrame(industry['Manuf']) - Rf\n",
    "Energy = pd.DataFrame(industry['Enrgy']) - Rf\n",
    "HiTec = pd.DataFrame(industry['HiTec']) - Rf\n",
    "Telecom = pd.DataFrame(industry['Telcm']) - Rf\n",
    "Shops = pd.DataFrame(industry['Shops']) - Rf\n",
    "Health = pd.DataFrame(industry['Hlth']) - Rf\n",
    "Utilities = pd.DataFrame(industry['Utils']) - Rf\n",
    "Other = pd.DataFrame(industry['Other']) - Rf"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "eaff08c8-3deb-4f38-bc5e-273d8a014f0b",
   "metadata": {},
   "source": [
    "### Building an OLS regression model to predict the `Î± (Intercept)` and `Î² (Slope)` for each of the 10 indsutry portfolios."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 15,
   "id": "dc0dc232-dd4b-4e66-af90-d62cc4faf128",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Industry: NoDur\n",
      "Alpha (Intercept): 0.3694428800682019\n",
      "Beta (Slope): 0.6526473559635404\n",
      "\n",
      "Industry: Durbl\n",
      "Alpha (Intercept): -0.41559907631688503\n",
      "Beta (Slope): 1.648535649966646\n",
      "\n",
      "Industry: Manuf\n",
      "Alpha (Intercept): 0.15977083495757133\n",
      "Beta (Slope): 1.1698462964148773\n",
      "\n",
      "Industry: Enrgy\n",
      "Alpha (Intercept): 0.5017185727422065\n",
      "Beta (Slope): 0.9698499564640046\n",
      "\n",
      "Industry: HiTec\n",
      "Alpha (Intercept): -0.06401952750987736\n",
      "Beta (Slope): 1.1329694391423117\n",
      "\n",
      "Industry: Telcm\n",
      "Alpha (Intercept): 0.19469092881013084\n",
      "Beta (Slope): 0.900729250947611\n",
      "\n",
      "Industry: Shops\n",
      "Alpha (Intercept): 0.2754921548270817\n",
      "Beta (Slope): 0.8264924015201591\n",
      "\n",
      "Industry: Hlth\n",
      "Alpha (Intercept): 0.23784118712422342\n",
      "Beta (Slope): 0.6730356956329137\n",
      "\n",
      "Industry: Utils\n",
      "Alpha (Intercept): 0.44458461627696927\n",
      "Beta (Slope): 0.5380861001316397\n",
      "\n",
      "Industry: Other\n",
      "Alpha (Intercept): -0.38713452121235553\n",
      "Beta (Slope): 1.2073094586151094\n",
      "\n"
     ]
    }
   ],
   "source": [
    "# Create a dictionary mapping the industry names to their corresponding DataFrames\n",
    "industry_excess_returns = {\n",
    "    'NoDur': Non_Durables,\n",
    "    'Durbl': Durables,\n",
    "    'Manuf': Manufacturing,\n",
    "    'Enrgy': Energy,\n",
    "    'HiTec': HiTec,\n",
    "    'Telcm': Telecom,\n",
    "    'Shops': Shops,\n",
    "    'Hlth': Health,\n",
    "    'Utils': Utilities,\n",
    "    'Other': Other\n",
    "}\n",
    "\n",
    "# Initialize lists to store alpha and beta values for each industry\n",
    "alpha_values = []\n",
    "beta_values = []\n",
    "\n",
    "# Iterate over each industry using the adjusted datasets\n",
    "for industry, excess_returns in industry_excess_returns.items():\n",
    "    # Extract the excess industry returns as the dependent variable\n",
    "    y = excess_returns.squeeze()  # Convert DataFrame to Series\n",
    "\n",
    "    # Prepare the independent variable (excess market return)\n",
    "    X = Excess_market_return  # Ensure Excess_market_return is correctly used\n",
    "    \n",
    "    # Add a constant to the independent variable to estimate alpha (intercept)\n",
    "    X = sm.add_constant(X)\n",
    "\n",
    "    # Fit the OLS regression model\n",
    "    model = sm.OLS(y, X).fit()\n",
    "\n",
    "    # Extract the intercept (alpha) and slope (beta) coefficients\n",
    "    alpha = model.params['const']\n",
    "    beta = model.params['Market']  # Ensure it matches the column name in X\n",
    "    \n",
    "    # Append the alpha and beta values to the respective lists\n",
    "    alpha_values.append(alpha)\n",
    "    beta_values.append(beta)\n",
    "\n",
    "# Display the alpha and beta values for each industry based on the adjusted calculations\n",
    "for i, industry in enumerate(industry_excess_returns.keys()):\n",
    "    print(f\"Industry: {industry}\")\n",
    "    print(f\"Alpha (Intercept): {alpha_values[i]}\")\n",
    "    print(f\"Beta (Slope): {beta_values[i]}\\n\")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 159,
   "id": "bcd003b7-c266-4144-a77a-55c990d46dee",
   "metadata": {},
   "outputs": [],
   "source": [
    "CAPM = pd.DataFrame({\n",
    "    'Industry': list(industry_excess_returns.keys()),\n",
    "    'Alpha (Intercept)': alpha_values,\n",
    "    'Beta (Slope)': beta_values\n",
    "})"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 161,
   "id": "b066a727-12c3-4a5c-b620-c852d667a551",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>Industry</th>\n",
       "      <th>Alpha (Intercept)</th>\n",
       "      <th>Beta (Slope)</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>NoDur</td>\n",
       "      <td>0.369443</td>\n",
       "      <td>0.652647</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>Durbl</td>\n",
       "      <td>-0.415599</td>\n",
       "      <td>1.648536</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>Manuf</td>\n",
       "      <td>0.159771</td>\n",
       "      <td>1.169846</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>Enrgy</td>\n",
       "      <td>0.501719</td>\n",
       "      <td>0.969850</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>HiTec</td>\n",
       "      <td>-0.064020</td>\n",
       "      <td>1.132969</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>5</th>\n",
       "      <td>Telcm</td>\n",
       "      <td>0.194691</td>\n",
       "      <td>0.900729</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>6</th>\n",
       "      <td>Shops</td>\n",
       "      <td>0.275492</td>\n",
       "      <td>0.826492</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>7</th>\n",
       "      <td>Hlth</td>\n",
       "      <td>0.237841</td>\n",
       "      <td>0.673036</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>8</th>\n",
       "      <td>Utils</td>\n",
       "      <td>0.444585</td>\n",
       "      <td>0.538086</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>9</th>\n",
       "      <td>Other</td>\n",
       "      <td>-0.387135</td>\n",
       "      <td>1.207309</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "  Industry  Alpha (Intercept)  Beta (Slope)\n",
       "0    NoDur           0.369443      0.652647\n",
       "1    Durbl          -0.415599      1.648536\n",
       "2    Manuf           0.159771      1.169846\n",
       "3    Enrgy           0.501719      0.969850\n",
       "4    HiTec          -0.064020      1.132969\n",
       "5    Telcm           0.194691      0.900729\n",
       "6    Shops           0.275492      0.826492\n",
       "7     Hlth           0.237841      0.673036\n",
       "8    Utils           0.444585      0.538086\n",
       "9    Other          -0.387135      1.207309"
      ]
     },
     "execution_count": 161,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "CAPM"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 21,
   "id": "c73c46af-24f0-4193-925e-07d2f199ad92",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>NoDur</th>\n",
       "      <th>Durbl</th>\n",
       "      <th>Manuf</th>\n",
       "      <th>Enrgy</th>\n",
       "      <th>HiTec</th>\n",
       "      <th>Telcm</th>\n",
       "      <th>Shops</th>\n",
       "      <th>Hlth</th>\n",
       "      <th>Utils</th>\n",
       "      <th>Other</th>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Date</th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>200401</th>\n",
       "      <td>0.06</td>\n",
       "      <td>-1.07</td>\n",
       "      <td>-0.62</td>\n",
       "      <td>0.44</td>\n",
       "      <td>4.53</td>\n",
       "      <td>1.41</td>\n",
       "      <td>0.45</td>\n",
       "      <td>3.09</td>\n",
       "      <td>1.92</td>\n",
       "      <td>2.88</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>200402</th>\n",
       "      <td>4.25</td>\n",
       "      <td>-0.07</td>\n",
       "      <td>1.95</td>\n",
       "      <td>4.69</td>\n",
       "      <td>-2.92</td>\n",
       "      <td>-0.52</td>\n",
       "      <td>6.09</td>\n",
       "      <td>0.89</td>\n",
       "      <td>2.07</td>\n",
       "      <td>2.16</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>200403</th>\n",
       "      <td>-0.09</td>\n",
       "      <td>-1.15</td>\n",
       "      <td>-0.27</td>\n",
       "      <td>-0.13</td>\n",
       "      <td>-2.55</td>\n",
       "      <td>-2.07</td>\n",
       "      <td>0.29</td>\n",
       "      <td>-3.96</td>\n",
       "      <td>1.13</td>\n",
       "      <td>-0.63</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>200404</th>\n",
       "      <td>1.42</td>\n",
       "      <td>2.30</td>\n",
       "      <td>-0.17</td>\n",
       "      <td>2.52</td>\n",
       "      <td>-4.91</td>\n",
       "      <td>-0.48</td>\n",
       "      <td>-2.70</td>\n",
       "      <td>3.54</td>\n",
       "      <td>-3.55</td>\n",
       "      <td>-3.76</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>200405</th>\n",
       "      <td>-1.89</td>\n",
       "      <td>-1.64</td>\n",
       "      <td>1.61</td>\n",
       "      <td>0.39</td>\n",
       "      <td>4.85</td>\n",
       "      <td>-2.95</td>\n",
       "      <td>0.30</td>\n",
       "      <td>-0.42</td>\n",
       "      <td>1.28</td>\n",
       "      <td>1.86</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>...</th>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>201308</th>\n",
       "      <td>-4.00</td>\n",
       "      <td>-1.00</td>\n",
       "      <td>-1.95</td>\n",
       "      <td>-1.83</td>\n",
       "      <td>-0.12</td>\n",
       "      <td>-3.28</td>\n",
       "      <td>-4.21</td>\n",
       "      <td>-3.49</td>\n",
       "      <td>-4.43</td>\n",
       "      <td>-3.66</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>201309</th>\n",
       "      <td>1.94</td>\n",
       "      <td>6.46</td>\n",
       "      <td>5.20</td>\n",
       "      <td>2.03</td>\n",
       "      <td>3.77</td>\n",
       "      <td>4.33</td>\n",
       "      <td>4.46</td>\n",
       "      <td>4.19</td>\n",
       "      <td>1.05</td>\n",
       "      <td>3.83</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>201310</th>\n",
       "      <td>4.75</td>\n",
       "      <td>0.72</td>\n",
       "      <td>4.56</td>\n",
       "      <td>4.86</td>\n",
       "      <td>3.80</td>\n",
       "      <td>5.52</td>\n",
       "      <td>5.08</td>\n",
       "      <td>3.47</td>\n",
       "      <td>3.35</td>\n",
       "      <td>3.87</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>201311</th>\n",
       "      <td>1.29</td>\n",
       "      <td>1.81</td>\n",
       "      <td>2.95</td>\n",
       "      <td>0.85</td>\n",
       "      <td>3.65</td>\n",
       "      <td>0.27</td>\n",
       "      <td>3.67</td>\n",
       "      <td>4.54</td>\n",
       "      <td>-1.81</td>\n",
       "      <td>4.74</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>201312</th>\n",
       "      <td>2.65</td>\n",
       "      <td>1.18</td>\n",
       "      <td>3.13</td>\n",
       "      <td>2.95</td>\n",
       "      <td>4.04</td>\n",
       "      <td>3.96</td>\n",
       "      <td>0.20</td>\n",
       "      <td>0.71</td>\n",
       "      <td>1.79</td>\n",
       "      <td>3.11</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "<p>120 rows Ã— 10 columns</p>\n",
       "</div>"
      ],
      "text/plain": [
       "        NoDur  Durbl  Manuf  Enrgy  HiTec  Telcm  Shops  Hlth  Utils  Other\n",
       "Date                                                                       \n",
       "200401   0.06  -1.07  -0.62   0.44   4.53   1.41   0.45  3.09   1.92   2.88\n",
       "200402   4.25  -0.07   1.95   4.69  -2.92  -0.52   6.09  0.89   2.07   2.16\n",
       "200403  -0.09  -1.15  -0.27  -0.13  -2.55  -2.07   0.29 -3.96   1.13  -0.63\n",
       "200404   1.42   2.30  -0.17   2.52  -4.91  -0.48  -2.70  3.54  -3.55  -3.76\n",
       "200405  -1.89  -1.64   1.61   0.39   4.85  -2.95   0.30 -0.42   1.28   1.86\n",
       "...       ...    ...    ...    ...    ...    ...    ...   ...    ...    ...\n",
       "201308  -4.00  -1.00  -1.95  -1.83  -0.12  -3.28  -4.21 -3.49  -4.43  -3.66\n",
       "201309   1.94   6.46   5.20   2.03   3.77   4.33   4.46  4.19   1.05   3.83\n",
       "201310   4.75   0.72   4.56   4.86   3.80   5.52   5.08  3.47   3.35   3.87\n",
       "201311   1.29   1.81   2.95   0.85   3.65   0.27   3.67  4.54  -1.81   4.74\n",
       "201312   2.65   1.18   3.13   2.95   4.04   3.96   0.20  0.71   1.79   3.11\n",
       "\n",
       "[120 rows x 10 columns]"
      ]
     },
     "execution_count": 21,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "industry_2 =\\\n",
    "(\n",
    "   pd\n",
    "    .read_excel('Industry_Portfolios-2.xlsx',index_col=0)\n",
    ")\n",
    "industry_2"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "7b1150a1-231e-4abb-88d5-03ff47f8dcd5",
   "metadata": {},
   "source": [
    "### Calculating `Mean Returns` for each Portolio including the Market Portfolio"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 95,
   "id": "9d03d1d4-652e-4487-929c-6a11ab102315",
   "metadata": {},
   "outputs": [],
   "source": [
    "mean_returns = industry_2.mean(numeric_only=True)\n",
    "Mean_Returns = pd.DataFrame({\"Mean_Return\": mean_returns})\n",
    "mean_returns_market = Market_portfolio.mean(numeric_only=True)\n",
    "Mean_Returns_market = pd.DataFrame({\"Mean_Return\": mean_returns_market})"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 99,
   "id": "3ce1071d-7ad3-43a0-896f-7371f6af415a",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>Mean_Return</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>Market</th>\n",
       "      <td>0.748083</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "        Mean_Return\n",
       "Market     0.748083"
      ]
     },
     "execution_count": 99,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "Mean_Returns_market"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 77,
   "id": "9e794539-ba7b-4a9a-b5ef-87b2c34b4a8f",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>index</th>\n",
       "      <th>Mean_Return</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>Market</td>\n",
       "      <td>0.748083</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "    index  Mean_Return\n",
       "0  Market     0.748083"
      ]
     },
     "execution_count": 77,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "Mean_Returns_market"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 101,
   "id": "8a4b1bdf-c681-4dcf-875e-13932f03bc90",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>Mean_Return</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>NoDur</th>\n",
       "      <td>0.902833</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Durbl</th>\n",
       "      <td>0.733333</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Manuf</th>\n",
       "      <td>1.012833</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Enrgy</th>\n",
       "      <td>1.231167</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>HiTec</th>\n",
       "      <td>0.766250</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Telcm</th>\n",
       "      <td>0.881417</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Shops</th>\n",
       "      <td>0.916333</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Hlth</th>\n",
       "      <td>0.783833</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Utils</th>\n",
       "      <td>0.907167</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Other</th>\n",
       "      <td>0.489083</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Market</th>\n",
       "      <td>0.748083</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "        Mean_Return\n",
       "NoDur      0.902833\n",
       "Durbl      0.733333\n",
       "Manuf      1.012833\n",
       "Enrgy      1.231167\n",
       "HiTec      0.766250\n",
       "Telcm      0.881417\n",
       "Shops      0.916333\n",
       "Hlth       0.783833\n",
       "Utils      0.907167\n",
       "Other      0.489083\n",
       "Market     0.748083"
      ]
     },
     "execution_count": 101,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "Mean_Returns_absolute = pd.concat([Mean_Returns, Mean_Returns_market])\n",
    "Mean_Returns_absolute"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 115,
   "id": "8bc98e8e-74bb-41de-8f58-5e766b316ea1",
   "metadata": {},
   "outputs": [],
   "source": [
    "market_beta = 1\n",
    "Market_Beta = pd.DataFrame({\"Beta (Slope)\": [market_beta]}, index = ['Market'])\n",
    "Market_Beta.rename(columns={'index':'Industry'}, inplace = True)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 117,
   "id": "505d5bef-ca76-48bc-8073-829f387a9e90",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>Beta (Slope)</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>Market</th>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "        Beta (Slope)\n",
       "Market             1"
      ]
     },
     "execution_count": 117,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "Market_Beta"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 103,
   "id": "38a427d3-d8e3-4345-a06c-d6605f27efb9",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>Beta (Slope)</th>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Industry</th>\n",
       "      <th></th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>NoDur</th>\n",
       "      <td>0.652647</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Durbl</th>\n",
       "      <td>1.648536</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Manuf</th>\n",
       "      <td>1.169846</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Enrgy</th>\n",
       "      <td>0.969850</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>HiTec</th>\n",
       "      <td>1.132969</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Telcm</th>\n",
       "      <td>0.900729</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Shops</th>\n",
       "      <td>0.826492</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Hlth</th>\n",
       "      <td>0.673036</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Utils</th>\n",
       "      <td>0.538086</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Other</th>\n",
       "      <td>1.207309</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "          Beta (Slope)\n",
       "Industry              \n",
       "NoDur         0.652647\n",
       "Durbl         1.648536\n",
       "Manuf         1.169846\n",
       "Enrgy         0.969850\n",
       "HiTec         1.132969\n",
       "Telcm         0.900729\n",
       "Shops         0.826492\n",
       "Hlth          0.673036\n",
       "Utils         0.538086\n",
       "Other         1.207309"
      ]
     },
     "execution_count": 103,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "CAPM_Beta = CAPM[['Industry', 'Beta (Slope)']]\n",
    "CAPM_Beta.set_index('Industry')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 147,
   "id": "ea08503b-9a6e-45aa-a60a-659f6fd10eae",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>Beta (Slope)</th>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Industry</th>\n",
       "      <th></th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>NoDur</th>\n",
       "      <td>0.652647</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Durbl</th>\n",
       "      <td>1.648536</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Manuf</th>\n",
       "      <td>1.169846</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Enrgy</th>\n",
       "      <td>0.969850</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>HiTec</th>\n",
       "      <td>1.132969</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Telcm</th>\n",
       "      <td>0.900729</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Shops</th>\n",
       "      <td>0.826492</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Hlth</th>\n",
       "      <td>0.673036</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Utils</th>\n",
       "      <td>0.538086</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Other</th>\n",
       "      <td>1.207309</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Market</th>\n",
       "      <td>1.000000</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "          Beta (Slope)\n",
       "Industry              \n",
       "NoDur         0.652647\n",
       "Durbl         1.648536\n",
       "Manuf         1.169846\n",
       "Enrgy         0.969850\n",
       "HiTec         1.132969\n",
       "Telcm         0.900729\n",
       "Shops         0.826492\n",
       "Hlth          0.673036\n",
       "Utils         0.538086\n",
       "Other         1.207309\n",
       "Market        1.000000"
      ]
     },
     "execution_count": 147,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# Remove any rows where 'Industry' is 'Market'\n",
    "#CAPM_Beta = CAPM_Beta[CAPM_Beta['Industry'] != 'Market']\n",
    "\n",
    "# Alternatively, you can use the drop method with the index parameter if 'Market' was set as an index before\n",
    "# CAPM_Beta.drop(index=CAPM_Beta[CAPM_Beta['Industry'] == 'Market'].index, inplace=True)\n",
    "\n",
    "# Display the resulting DataFrame\n",
    "#CAPM_Beta\n",
    "# Create the new row as a DataFrame\n",
    "#market_row = pd.DataFrame({'Industry': ['Market'], 'Beta (Slope)': [1.0]})\n",
    "\n",
    "# Concatenate the new row to the existing DataFrame\n",
    "#CAPM_Beta = pd.concat([CAPM_Beta, market_row], ignore_index=True)\n",
    "\n",
    "# Display the resulting DataFrame\n",
    "CAPM_Beta.set_index('Industry')"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "d69e3145-8834-471f-8a70-6d1d39dd920d",
   "metadata": {},
   "source": [
    "### Building an OLS Regression model for predticting the `Î± (Intercept)` and `Î² (Slope)` for the Security Market line by regressing the `Mean Returns` and the `Î² (Slope)` of all portfolios. "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 149,
   "id": "96e932b5-e4cc-4d77-98a8-497ee27da2e9",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "New Intercept (Alpha) for Security Market Line: 1.0327683682657056\n",
      "New Slope (Beta) for Security Market Line: -0.18546745836573278\n"
     ]
    }
   ],
   "source": [
    "# Now, merge the updated Mean_Returns with CAPM_Beta to have both Mean Return and Beta values\n",
    "CAPM_Beta['Mean_Return'] = Mean_Returns_absolute['Mean_Return'].values\n",
    "\n",
    "# Prepare the independent variable (Beta values) and dependent variable (Mean Returns)\n",
    "X = CAPM_Beta['Beta (Slope)']\n",
    "y = CAPM_Beta['Mean_Return']\n",
    "\n",
    "# Add a constant to the independent variable to estimate the new intercept (alpha) for the Security Market Line\n",
    "X = sm.add_constant(X)\n",
    "\n",
    "# Fit the OLS regression model for the Security Market Line\n",
    "security_market_line = sm.OLS(y, X).fit()\n",
    "\n",
    "# Extract the intercept (new alpha) and slope (new beta) coefficients\n",
    "new_alpha = security_market_line.params['const']\n",
    "new_beta = security_market_line.params['Beta (Slope)']\n",
    "\n",
    "# Display the results\n",
    "print(f\"New Intercept (Alpha) for Security Market Line: {new_alpha}\")\n",
    "print(f\"New Slope (Beta) for Security Market Line: {new_beta}\")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 165,
   "id": "3dc3152b-fbcd-4db8-a3fb-a4692a154cf3",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>Line</th>\n",
       "      <th>SML Alpha (Intercept)</th>\n",
       "      <th>SML Beta (Slope)</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>Security Market Line</td>\n",
       "      <td>1.032768</td>\n",
       "      <td>-0.185467</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "                   Line  SML Alpha (Intercept)  SML Beta (Slope)\n",
       "0  Security Market Line               1.032768         -0.185467"
      ]
     },
     "execution_count": 165,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "SML = pd.DataFrame({\n",
    "    'Line': ['Security Market Line'],\n",
    "    'SML Alpha (Intercept)': [new_alpha],\n",
    "    'SML Beta (Slope)': [new_beta]\n",
    "})\n",
    "SML"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "3d45e7cf-7679-416a-98de-34a2c7de69bf",
   "metadata": {},
   "source": [
    "### Plotting the `Security Market Line` along with the `Top 10 Industry Portfolios` and the `Market Portfolios`."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 171,
   "id": "36c66d57-cb3e-40ee-b479-1f1ba378f3bd",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "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9LWICoO5qRkLCwu4u7vD0NBQa/tk8UREREQliqGhIcqVK4dy5coV6esolUpERUWhQoUKMDBgZx3SH8xN3eHZJiIiIiIi0gCLJyIiIiIiIg2weCIiIiIiItIAiyciIiIiIiINsHgiIiIiIiLSAIsnIiIiIiIiDbB4IiIiIiIi0gCLJyIiIiIiIg2weCIiIiIiItIAiyciIiIiIiINsHgiIiIiIiLSAIsnIiIiIiIiDbB4IiIiIiIi0gCLJyIiIiIiIg2weCIiIiIiItIAiyciIiIiIiINGOk6gFu3biEkJAQRERFITEzEN998g8aNGxfYPjExEevXr0d4eDhiY2PRqVMnDBo0qPgCJiIiIiKiMknnV54yMjLg5eWFIUOGaNQ+KysLNjY26NatGzw9PYs4OiIiIiIiolw6v/LUoEEDNGjQQOP2zs7OGDx4MADgyJEjRRUWERERERGRCp0XT8UhKysLWVlZ4nOJRAJzc3MolUqtv5ZSqRQfRPqEuUn6irlJ+oq5SfqKual9BgaadcgrE8WTXC7Htm3bxOfe3t6YO3cuYmNjkZmZqdXXUiqViIuLA6D5m0BUHJibpK+Ym6SvmJukr5ib2mViYgI3NzeN2paJ4kkmk8Hf3198LpFIAACurq5af628vwBUrFiRyUx6hblJ+oq5SfqKuUn6irmpO2WieDI2NoaxsXG+5UWVbAYGBuKDSJ8wN0lfMTdJXzE3SV8xN3WDZ5uIiIiIiEgDOr/ylJ6ejtjYWPF5XFwcIiMjYWVlBUdHR2zevBkvXrzAmDFjxDaRkZHiti9fvkRkZCSMjIxQoUKF4g6fiIiIiIjKCJ0XTw8fPsTMmTPF5+vXrwcAtGrVCqNHj0ZiYiISEhJUtvn222/Ff4eHh+PkyZNwcnLCsmXLiidoIiIiIiIqcySCIAi6DqI0USqViIqK4g18pHeYm6SvmJukr5ibpK+Ym7rDs01ERERERKQBFk9EREREREQaYPFERERERESkARZPREREREREGmDxREREREREpAEWT0RERERERBpg8URERERERKQBFk9EREREREQaYPFERERERESkARZPREREREREGmDxREREREREpAEWT0RERERERBpg8URERERERKQBFk9EREREREQaYPFERERERESkARZPREREREREGmDxREREREREpAEWT0RERERERBpg8URERERERKQBFk9EREREREQaYPFERERERESkARZPREREREREGmDxREREREREpAEWT0RERERERBpg8URERERERKQBFk9EREREREQaYPFERERERESkARZPREREREREGmDxREREREREpAEWT0RERERERBpg8URERERERKQBFk9EREREREQaYPFERERERESkARZPOrZv3z78+OOPuHbtGgRB0HU4RERUBnzxxRdwcHCAq6urrkMhIipRWDzp2J9//onp06ejXr16qFKlCr755hucPHkSOTk5ug6NiIi0zM/PDxKJBAcPHlRZPn/+fEgkEowfP77IYzh16hS2bduGiIgIxMbGFvnrERGVJiyedCgzMxP79u0Tn4eHh2PhwoVo0aIF3NzcMHz4cOzevRvp6ek6jJKIiLTJx8cHa9euVVkWFBSE6tWrF8vrR0REoGLFirC1tS2W1yMiKk1YPOmQiYkJbt68id9++w1t2rSBoaGhuC4uLg6rV6+Gv78/nJyc0KtXL2zZsgXJyck6jJiIiD7UZ599hr1794qf52fPnoUgCGjSpInYpl+/fnBzc4ONjQ0aNWqEI0eOiOuCgoJQv359/PTTT3B2doaLiwsWL14srh80aJDKFaykpCRIJBJERkbit99+w7Bhw3D9+nVYWVlh0KBBRX24RESlCosnHatYsSK++uorHDp0CM+ePcO6desglUphbm4utnn16hX++ecf9OnTB05OTujYsSNWrFiBp0+f6jByIiLS2Bv3tNrZ2aFjx47YsmULAGDNmjUYPHiwSvO2bdvi9u3beP78OT777DP06NEDKSkp4vqbN2/CzMwMMTEx2Lp1K7755hs8fPjwnWGMHTsWK1asQJ06dfDq1SsEBQVp5/iIiMoIFk96pFy5chgwYADkcjkSEhIgl8sxcOBAODg4iG2ysrKwf/9+jBw5Em5ubvD19cW8efNw7949HUZORET55KQAsWOBh97AQ4/cn5kPAGU6Bg8ejLVr1+L169fYvn07+vfvr7Lp4MGDYWtrC2NjY0yaNAlKpRLXrl0T15crVw6TJk2CsbEx/Pz84O3tjStXrhTzARIRlT0snvSUhYUFpFIpgoKC8OzZMxw+fBhfffUVPDw8VNqdOXMGkydPho+PD2rVqoWpU6fiwoULHLmPiEiXclKAR75A0jIgKxLIjvnfz8QlaOvXGLGxsfjpp5/g6+ur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Ki4uVnZ2trZv3664uDhP82QlXl5e+vWvf60VK1bovvvuk7+/v9klAcAdgeYJAHDTwsPD1a5dO8/j7t27a/Lkydq2bdtNNU+1KTExUb169VKTJk0829avXy+bzabnn39evr6+nu19+vTRxIkT5Xa7zSjVkAEDBui9997Txo0bNW7cOLPLAYA7As0TAKDGeHt7y8vLS/Xq1auwvbS0VMnJydq6davy8vLk6+urnj176uGHH1ZAQIAkadq0aTpz5owkacKECZKkZs2aacmSJbpy5Yo++ugjffPNN8rLy5PdbldoaKgcDod69ep1w7qOHj2q77//XuPHj6+w/fz58/Lz81ODBg2q3M9ms133uFeuXNHq1au1bds2nTt3TgEBAerVq5cmTZqkhg0besZNmzZN4eHhiomJ0apVq3Tq1Ck1btxYo0aN0qhRoyoc8+LFi1q9erUyMjI8x+zbt68mTpxYoU4vLy/169dPaWlpio+Pv2GtAIBbR/MEALhpLpdLZWVlcrvdKiwsVEpKin788UcNGDCgwphXX31Vf//73zV27FhFRUUpPz9fq1at0vPPP69XXnlFPj4+evbZZ7Vw4UL5+fnpsccek3S1GZOuNl/nz59XXFycmjRpotLSUn3zzTd67bXXNHXqVN1///3XrXPPnj2y2+3q3Llzhe1RUVHau3ev3nzzTQ0dOlTt27eXj4+PoXN3u936j//4D3377bdyOByKjo7WsWPHtGrVKh06dEgvvfSSp35Jys7O1vLly/Xggw8qKChIW7du1fLly1VaWqoxY8ZIki5fvqznn39eZ8+eVXx8vFq3bq0TJ05o1apVOn78uP74xz9WaJI6d+6s1NRUnThxQhEREYbqBgDcPJonAMBNe+655yo89vb21mOPPabu3bt7tu3YsUP79u3T73//e917772e7a1bt9acOXP0xRdfaNiwYWrbtq18fHzk6+urqKioCsf18/PT1KlTPY9dLpe6du2qCxcu6NNPP71h83To0CG1bNmy0hWmuLg4HT58WNu2bdO2bdtkt9vVunVr9ejRQ6NGjfJcFavK/v37tX//fj388MOe5qdbt25q2rSp3njjDX355Zd64IEHPOMLCgq0YMECtWnTRpLUo0cPFRUVac2aNRo+fLjq16+vzz77TMeOHdP8+fM9t0N27dpVTZo00cKFC7Vv3z716NHDc8zIyEhJ0nfffUfzBAB1gOYJAHDTfvvb36pVq1aSpOLiYu3atUvLli2Ty+XSiBEjJF296tOwYUP17NlTZWVlnn3btGmjoKAgHThwQMOGDbvhc+3YsUOffvqpsrOzdfnyZc/2n17duZby299+ztvbWzNmzFBOTo7279+vw4cP6+9//7s++eQTbdy4UfPmzfMsiPFz3377rSRVWtyib9+++utf/6pvv/22QvMUFhbmaZzKDRgwQJmZmTp69Kg6deqkPXv2KCIiQm3atKnwWnXv3l02m00HDhyo0DyVn9O5c+du+BoAAG4dzRMA4Ka1atWq0oIRZ86c0QcffKCBAweqYcOGKiws1IULF/TQQw9VeYzi4uIbPk9GRoYWLVqkPn36KC4uTkFBQapXr55SU1O1efPmG+5/5coVBQUFXfP7YWFhCgsLk3T1drz169frvffe00cffaTf/e53Ve5z/vx51atXr1JTZrPZFBQUVOm8qnr+8m3lYwsLC5Wbm6tJkyZV+Zw/P2b5LYZXrly55rkBAGoOzRMAoEa1bt1a+/fv16lTp9S+fXv5+/vL399f//7v/17l+J+ucnctW7duVUhIiJ555pkK7/kpKSkxVFNAQIDOnz9vaKzNZlNsbKzWrFmjEydOXHNco0aNVFZWpqKiogoNlNvtltPprNBUSleXcv+58m3lS437+/vLx8dHTz75ZJXP+fMlycvP6Xq3FwIAao7d7AIAALeX7OxsSf/8hb5nz54qLi6Wy+VSu3btKn399LY4Ly+va15F8fLyqtA4OZ1O7d6921BNoaGhOn36dKXtBQUFVY4/d+6cLl68WGFZ85/r2rWrJGnLli0VtmdkZOjy5cue75fLycnxvDblvvrqK/n6+qpt27aSrr5Wp0+flr+/f5WvVUhISIX9y8+p/KoZAKB2ceUJAHDTTpw44Xlvzvnz55WRkaHMzEz17t3b84t+//799dVXX+nll1/WqFGj1L59e9WrV09nz57VgQMH1KtXL/Xu3VuSFBERoe3bt2v79u0KCQmRj4+PIiIi1LNnT+3atUvvvPOO+vTpo/z8fK1Zs0aNGzfWqVOnbljnXXfdpc2bN+vkyZMVmrW33npLFy9e1L333qvw8HDZ7XadPHlS69evl91u19ixY695zG7duulXv/qV/va3v+nSpUvq2LGjjh8/rlWrVqlt27a67777Koxv3LixXn31VT344INq3LixtmzZoszMTP3Lv/yL6tevL0kaNWqUMjIyNHfuXI0ePVoRERFyu93Kz8/X/v37FRcXpw4dOniOeejQIdntdkVHRxv8iQEAbgXNEwDgpi1dutTz335+fgoJCdGjjz6q4cOHe7bb7XbNnDlTn376qbZs2aLExETVq1dPTZs2VXR0dIVV4iZMmCCn06m33npLly5d8nzO0+DBg1VYWKiNGzdq8+bNCgkJkcPh0NmzZ7V69eob1nnPPfeoQYMG2r17t2dlPEkaOXKktm/frrS0NJ07d06XL19WQECAOnTooGnTplVa9e+nbDabZsyYoY8//lhffPGFPvnkEwUEBOi+++7TpEmTKi1k0aZNGw0aNEgff/yx53OeHn30UcXGxnrGNGjQQC+88IKSkpK0adMm5eXlycfHR8HBweratauaNWtW4Zhff/21evToUeEzpQAAtcfmtvLHpwMAUEPeffddffPNN1q4cGGdf6Bs+Yfkzp49u8aOmZubq6efflrPPfecunXrVmPHBQBcG+95AgDcEcaNG6dz584pIyPD7FJqxCeffKIuXbrQOAFAHeK2PQDAHSEoKEjTp0/XhQsXzC7llpWVlal58+ZyOBxmlwIAdxRu2wMAAAAAA7htDwAAAAAMoHkCAAAAAANongAAAADAAJonAAAAADCA5gkAAAAADKB5AgAAAAADaJ4AAAAAwACaJwAAAAAw4P8A1i07DRAprdkAAAAASUVORK5CYII=",
      "text/plain": [
       "<Figure size 1000x600 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "#mean_returns_market = Market_portfolio.mean(numeric_only=True)\n",
    "#Mean_Returns_Market = pd.DataFrame({\"Mean_Return_Market\": mean_returns_market})\n",
    "\n",
    "# Create a range of beta values for the x-axis to represent the Security Market Line\n",
    "beta_range = pd.Series([CAPM_Beta['Beta (Slope)'].min() - 0.5, CAPM_Beta['Beta (Slope)'].max() + 0.5])\n",
    "\n",
    "# Calculate the corresponding expected returns using the Security Market Line equation\n",
    "expected_returns = new_alpha + new_beta * beta_range\n",
    "\n",
    "# Plot the Security Market Line\n",
    "plt.figure(figsize=(10, 6))\n",
    "plt.plot(beta_range, expected_returns, label='Security Market Line', color='Black', linestyle='-', linewidth=2)\n",
    "\n",
    "# Plot the actual mean returns for each industry\n",
    "plt.scatter(CAPM_Beta['Beta (Slope)'], CAPM_Beta['Mean_Return'], color='Gold', marker='o', label='Industries')\n",
    "#plt.scatter(CAPM_Beta['Beta (Slope)'], CAPM_Beta['Mean_Return'], color='Purple', marker='o')\n",
    "\n",
    "# Annotate each industry on the plot\n",
    "for i in range(len(CAPM_Beta)):\n",
    "    plt.text(CAPM_Beta['Beta (Slope)'][i], CAPM_Beta['Mean_Return'][i], CAPM_Beta['Industry'][i], fontsize=9)\n",
    "\n",
    "\n",
    "plt.title('Security Market Line (SML)')\n",
    "plt.xlabel('Beta (Slope)')\n",
    "plt.ylabel('Mean Return')\n",
    "plt.legend()\n",
    "plt.grid(True)\n",
    "plt.show()"
   ]
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3 (ipykernel)",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.12.4"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}
